// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "bindings": {
      // "shift shift": "file_finder::Toggle"
      "ctrl-j": "menu::SelectNext",
      "ctrl-k": "menu::SelectPrevious",
      "ctrl-l": "menu::Confirm"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !menu",
    "bindings": {
      // "j k": ["workspace::SendKeystrokes", "escape"]
      "shift-u": "editor::SelectLargerSyntaxNode",
      "shift-d": "editor::SelectSmallerSyntaxNode",
      "space r n": "editor::Rename",
      "space n": ["editor::SelectNext", { "replace_newest": false }], // Add selection to Next Find Match
      "space shift-n": ["editor::SelectPrevious", { "replace_newest": false }],
      "space space n": ["editor::SelectNext", { "replace_newest": true }],
      "space space shift-n": ["editor::SelectPrevious", { "replace_newest": true }]
    }
  },
  {
    "context": "Editor && showing_completions",
    "use_key_equivalents": true,
    "bindings": {
      "up": "editor::ContextMenuPrevious",
      "ctrl-k": "editor::ContextMenuPrevious",
      "down": "editor::ContextMenuNext",
      "ctrl-j": "editor::ContextMenuNext",
      "pageup": "editor::ContextMenuFirst",
      "pagedown": "editor::ContextMenuLast",
      "ctrl-l": "editor::ConfirmCompletion"
    }
  },
  {
    "context": "Editor && showing_code_actions",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-l": "editor::ConfirmCodeAction",
      "up": "editor::ContextMenuPrevious",
      "ctrl-k": "editor::ContextMenuPrevious",
      "down": "editor::ContextMenuNext",
      "ctrl-j": "editor::ContextMenuNext",
      "pageup": "editor::ContextMenuFirst",
      "pagedown": "editor::ContextMenuLast"
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      "g d": "editor::GoToDefinition",
      "t": ["easy_motion::Word", "both"],
      "s": ["easy_motion::NChar", 1]
    }
  },
  {
    "context": "vim_mode == normal && !menu",
    "bindings": {
      // "shift-y": ["workspace::SendKeystrokes", "y $"] // use nvim's Y behavior
      "space d d": "project_panel::ToggleFocus",
      "space f f": "file_finder::Toggle",
      "ctrl-p": "file_finder::Toggle",
      "ctrl-shift-p": "command_palette::Toggle",
      ", f o": "editor::Format",
      "space q": "pane::CloseActiveItem",
      "space c a": "editor::ToggleCodeActions",

      // task
      "space t n": "editor::SpawnNearestTask"
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      // "s": ["vim::PushSneak", {}],
      // "S": ["vim::PushSneakBackward", {}]
    }
  },
  {
    "context": "EmptyPane || SharedScreen || MarkdownPreview || KeyContextView",
    "bindings": {}
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      "j j": "vim::NormalBefore",
      "ctrl-s": "editor::AcceptEditPrediction",
      "cmd-j": "copilot::NextSuggestion",
      "cmd-k": "copilot::PreviousSuggestion"
    }
  },
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // put key-bindings here (in addition to above) if you want them to
      // work when no editor exists
      // "space f": "file_finder::Toggle"
      "space f f": "file_finder::Toggle"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      ":": "command_palette::Toggle",
      "%": "project_panel::NewFile",
      "/": "project_panel::NewSearchInDirectory",
      "d": "project_panel::NewDirectory",
      "enter": "project_panel::OpenPermanent",
      "ctrl-l": "project_panel::OpenPermanent",
      "escape": "project_panel::ToggleFocus",
      "h": "project_panel::CollapseSelectedEntry",
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious",
      "l": "project_panel::ExpandSelectedEntry",
      "o": "project_panel::OpenPermanent",
      "shift-d": "project_panel::Delete",
      "shift-r": "project_panel::Rename",
      "t": "project_panel::OpenPermanent",
      "v": "project_panel::OpenPermanent",
      "p": "project_panel::Open",
      "x": "project_panel::RevealInFileManager",
      "s": "project_panel::OpenWithSystem",
      "] c": "project_panel::SelectNextGitEntry",
      "[ c": "project_panel::SelectPrevGitEntry",
      "] d": "project_panel::SelectNextDiagnostic",
      "[ d": "project_panel::SelectPrevDiagnostic",
      "}": "project_panel::SelectNextDirectory",
      "{": "project_panel::SelectPrevDirectory",
      "shift-g": "menu::SelectLast",
      "g g": "menu::SelectFirst",
      "-": "project_panel::SelectParent",
      "ctrl-6": "pane::AlternateFile"
    }
  }
]
